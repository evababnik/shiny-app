library(readr)
library(tidyverse)
branded_food <- read_csv("FoodData_Central_csv_2022-10-28/branded_food.csv")
branded_food$not_a_significant_source_of <-NULL
branded_food$household_serving_fulltext <-NULL
branded_food$package_weight <-NULL
branded_food$data_source <- NULL
branded_food$modified_date<-NULL
branded_food$available_date <-NULL
branded_food$subbrand_name <-NULL
branded_food$brand_name <-NULL
branded_food$discontinued_date <-NULL
branded_food$preparation_state_code <-NULL
branded_food$trade_channel <- NULL
branded_food$short_description <- NULL
unique(branded_food$market_country)
table(branded_food$market_country)
branded_food$market_country <-NULL
library(httr)
url <- "https://api.nal.usda.gov/fdc/v1/foods/search"
params <- list(api_key = "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8", format = "json")
# Send the API request and get the response
response <- GET(url, query = params)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
library(jsonlite)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
View(params)
# Set the API URL
url <- "https://api.nal.usda.gov/fdc/v1/foods/search"
# Set the API parameters for requesting available tables
params <- list(api_key = "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8")
# Send the API request and get the response
response <- GET(url, query = params)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
# Set the API parameters for requesting available tables
params <- list(api_key = "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8",  includeDataTypes = "Survey (FNDDS)")
# Send the API request and get the response
response <- GET(url, query = params)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
View(data)
# Nastavitev zahteve API-ja
api_key <- "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8"
fdc_ids <- "1105904"
url <- paste0("https://api.nal.usda.gov/fdc/v1/foods?fdcIds=", fdc_ids, "&api_key=", api_key)
# Pošiljanje zahteve API-ju in pridobivanje odgovora
response <- httr::GET(url)
content(response)
url <- "https://api.nal.usda.gov/fdc/v1/foods/list"
params <- list(api_key = "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8", format = "abridged")
# Send the API request and get the response
response <- GET(url, query = params)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
View(data)
url <- "https://api.nal.usda.gov/fdc/v1/foods/search"
params <- list(api_key = api_key, generalSearchInput = "banana")
# Send the API request and get the response
response <- GET(url, query = params)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
json_data <- content(response, as = "text")
parsed_data <- jsonlite::fromJSON(json_data)
str(parsed_data)
View(parsed_data)
# Nastavitev zahteve API-ja
api_key <- "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8"
fdc_ids <- "1105904"
url <- paste0("https://api.nal.usda.gov/fdc/v1/foods?fdcIds=", fdc_ids, "&api_key=", api_key)
# Pošiljanje zahteve API-ju in pridobivanje odgovora
response <- httr::GET(url)
content(response)
View(response)
api_key <- "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8"
# Set the API URL and parameters
fdcId <- "1105911" # Vstavite poljuben fdcId
url <- paste0("https://api.nal.usda.gov/fdc/v1/food/", fdcId)
params <- list(api_key = api_key)
# Send the API request and get the response
response <- GET(url, query = params)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
# Send the API request and get the response
response <- httr::GET(url)
# Convert the response to a data frame
data <- content(response, as = "text") %>%
fromJSON(flatten = TRUE) %>%
as.data.frame()
content(response)
api_key <- "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8"
# Set the API URL and parameters
fdcId <- "1105911" # Vstavite poljuben fdcId
url <- paste0("https://api.nal.usda.gov/fdc/v1/food/", fdcId)
params <- list(api_key = api_key)
# Send the API request and get the response
response <- httr::GET(url)
content(response)
url <- paste0("https://api.nal.usda.gov/fdc/v1/food/", fdcId)
params <- list(api_key = "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8")
# Set the API URL and parameters
fdcId <- "1105911" # Vstavite poljuben fdcId
url <- paste0("https://api.nal.usda.gov/fdc/v1/foods/", fdc_ids, "&api_key=", api_key)
# Pošiljanje zahteve API-ju in pridobivanje odgovora
response <- httr::GET(url)
content(response)
# Nastavitev zahteve API-ja
api_key <- "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8"
fdc_ids <- "1105911"
url <- paste0("https://api.nal.usda.gov/fdc/v1/foods?fdcIds=", fdc_ids, "&api_key=", api_key)
# Pošiljanje zahteve API-ju in pridobivanje odgovora
response <- httr::GET(url)
content(response)
url <- paste0("https://api.nal.usda.gov/fdc/v1/food/", fdc_ids, "&api_key=", api_key)
# Pošiljanje zahteve API-ju in pridobivanje odgovora
response <- httr::GET(url)
content(response)
# Nastavitev zahteve API-ja
api_key <- "kHbFWekgGusKc2LfzKp4dWpa6508yiI2Qx2IPLs8"
fdc_ids <- "1105911"
url <- paste0("https://api.nal.usda.gov/fdc/v1/foods?fdcIds=", fdc_ids, "&api_key=", api_key)
# Pošiljanje zahteve API-ju in pridobivanje odgovora
response <- httr::GET(url)
content(response)
library(readr)
food <- read_csv("FoodData_Central_csv_2022-10-28/food.csv")
food$publication_date <-NULL
food_update_log_entry <- read_csv("FoodData_Central_csv_2022-10-28/food_update_log_entry.csv")
food_upadate_log_entry$last_updated
food_update_log_entry$last_updated <-NULL
View(food_update_log_entry)
View(food)
rename(food_update_log_entry, "id" = "fdc_id")
rename(food_update_log_entry, "fdc_id" = "id")
lenght(intersect(food$fdc_id, food_update_log_entry$id))
length(intersect(food$fdc_id, food_update_log_entry$id))
intersect(food$fdc_id, food_update_log_entry$id)
food_update_log_entry <- rename(food_update_log_entry, "fdc_id" = "id")
View(food_update_log_entry)
View(food)
food_update_log_entry <- rename(food_update_log_entry, "description1"="description")
merge(x=food,y=food_update_log_entry,by="fcd_id",all=TRUE)
merge(x=food,y=food_update_log_entry,all=TRUE)
tab<-merge(x=food,y=food_update_log_entry,all=TRUE)
View(tab)
View(food_update_log_entry)
View(food)
tab<-merge(x=food,y=food_update_log_entry,by="fdc_id",all=TRUE)
View(tab)
View(food)
View(tab)
library(dplyr)
tab <- tab %>% drop_na(description1)
library(shiny); runApp('aplikacija.R')
runApp('aplikacija.R')
runApp('aplikacija.R')
runApp('aplikacija.R')
runApp('aplikacija.R')
runApp('aplikacija.R')
runApp('aplikacija.R')
runApp('aplikacija.R')
runApp('aplikacija.R')
library(shiny); runApp('aplikacija.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('_old')
library(shiny)
library(tidyverse)
library(lubridate)
library(plotly)
library(shinythemes)
library(shinydashboard)
install.packages("tmap")
runApp('_old')
runApp()
runApp("shiny_app")
library(readxl)
library(eurostat)
library(sf)
library(leaflet)
library(tmap)
install.packages("tmap")
library(readxl)
library(eurostat)
library(sf)
library(leaflet)
library(tmap)
library(tidyverse)
library(reshape2)
library(shiny)
library(tidyverse)
library(lubridate)
library(plotly)
library(shinythemes)
library(shinydashboard)
library(readxl)
library(eurostat)
library(tmap)
library(reactable)
library(shinythemes)
library(tidyverse)
library(lubridate)
library(plotly)
library(shinythemes)
library(shinydashboard)
library(bslib)
runApp()
FCD <- read_excel("Food_composition_dataset.xlsx")
FCD <- read_excel("Food_composition_dataset.xlsx")
drzave <- data.frame(
imena = c('Italy', 'Finland', 'France', 'Germany', 'Netherlands', 'Sweden', 'United Kingdom'),
kratice = c('IT', 'FI', 'FR', 'DE', 'NL', 'SE', 'UK'))
country <- FCD %>% group_by(COUNTRY, NUTRIENT_TEXT, level1, level2)%>% summarize(mean_nutri = mean(LEVEL)) %>%
left_join(drzave, by = c('COUNTRY'= 'imena'))
nutrienti_vsi2 <- unique(country$NUTRIENT_TEXT)
SHP_0 <- get_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
naredi_zemljevid <- function(podatki, nutrient) {
podatki <- podatki %>% group_by(COUNTRY, kratice, NUTRIENT_TEXT) %>% summarize(mean_value = mean(mean_nutri)) %>%
dplyr::filter(NUTRIENT_TEXT == nutrient)
ss <- st_transform(SHP_0)
ss <- ss %>% dplyr::filter(geo %in% drzave$kratice) %>% left_join(podatki, by = c('geo' = 'kratice')) %>%
select(geometry, COUNTRY, NUTRIENT_TEXT, mean_value) %>% drop_na(COUNTRY)
return(ss)
}
tabela1 <- function(podatki, nutrient) {
podatki <- podatki %>% dplyr::filter(NUTRIENT_TEXT == nutrient) %>%
group_by(COUNTRY, level1) %>% summarize(mean_value = mean(mean_nutri)) %>% mutate_if(is.numeric, round, digits = 2)
podatki <- podatki %>% spread(key = 'COUNTRY', value = 'mean_value', fill = 0)
return(podatki)
}
tabela2 <- function(podatki, nutrient) {
podatki <- podatki %>% dplyr::filter(NUTRIENT_TEXT == nutrient) %>%
group_by(COUNTRY, level1, level2) %>% summarize(mean_value = mean(mean_nutri)) %>% mutate_if(is.numeric, round, digits = 2)
podatki <- podatki %>% spread(key = 'COUNTRY', value = 'mean_value', fill = 0)
return(podatki)
}
runApp()
install.packages("tmap")
library(tmap)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("tmap")
R.version.string
library(tmap)
shiny::runApp()
library(reactable)
library(reactable)
